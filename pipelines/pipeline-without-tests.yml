resource_types:
  - name: bitbucket-build-status
    type: registry-image
    source:
      repository: mgbi/bitbucket-build-status-resource


resources:
- name: stage-branch
  type: git
  source:
    uri: ((repo-uri))
    branch: stage
    private_key: ((private-repo-key))

- name: prod-branch
  type: git
  source:
    uri: ((repo-uri))
    branch: prod
    private_key: ((private-repo-key))
  check_every: 10s

- name: build-status
  type: bitbucket-build-status
  source:
    driver: Bitbucket Cloud
    client_id: ((bitbucket-client-id))
    client_secret: ((bitbucket-client-secret))
    repository: ((bitbucket-repository))

- name: prod-base-image
  type: docker-image
  source:
    repository: ((prod-base-repository))
    username: ((prod-base-registry-user))
    password: ((prod-base-registry-pass))

- name: prod-image
  type: docker-image
  source:
    repository: ((prod-repository))
    username: ((prod-registry-user))
    password: ((prod-registry-pass))


jobs:
- name: build-prod-images
  serial: true
  build_logs_to_retain: 10
  plan:
  - get: stage-branch
    trigger: true
  - put: build-status
    params:
      build_status: INPROGRESS
      repository: stage-branch
      description_file: stage-branch/build_descriptions/build-prod-images.txt
  - task: source-pre-prod
    input_mapping:
      source: stage-branch
    file: stage-branch/tasks/source-pre-prod.yml
  - get: prod-base-image
    params:
      save: true
  - put: prod-image
    params:
      load_base: prod-base-image
      build: stage-branch
      dockerfile: stage-branch/((prod-image-dockerfile-path))
      build_args:
        BASE_IMAGE: ((prod-base-repository))
      # only the first image is taged as latest
      tag_as_latest: true
    get_params:
      # with skip_download the image is not saved
      # skip_download: true
      save: true
    timeout: 10m
  on_success:
    put: build-status
    params:
      build_status: SUCCESSFUL
      repository: stage-branch
      description_file: stage-branch/build_descriptions/build-prod-images.txt
  on_failure:
    put: build-status
    params:
      build_status: FAILED
      repository: stage-branch
      description_file: stage-branch/build_descriptions/build-prod-images.txt

- name: check-force-merge
  serial: true
  build_logs_to_retain: 10
  plan:
  - get: stage-branch
    trigger: true
    passed: [build-prod-images]
  - put: build-status
    params:
      build_status: INPROGRESS
      repository: stage-branch
      description_file: stage-branch/build_descriptions/check-force-merge.txt
  - task: force-prod-merge
    input_mapping:
      source-branch: stage-branch
    file: stage-branch/tasks/git-force-merge-by-commit.yml
    params:
      DESTINATION_BRANCH: prod
      OAUTH_CLIENT_KEY: ((bitbucket-client-id))
      OAUTH_CLIENT_SECRET: ((bitbucket-client-secret))
  on_success:
    put: build-status
    params:
      build_status: SUCCESSFUL
      repository: stage-branch
      description_file: stage-branch/build_descriptions/check-force-merge.txt
  on_failure:
    put: build-status
    params:
      build_status: FAILED
      repository: stage-branch
      description_file: stage-branch/build_descriptions/check-force-merge.txt

- name: deploy-stage-env
  serial: true
  build_logs_to_retain: 10
  plan:
  - get: stage-branch
    trigger: true
    passed: [build-prod-images]
  - put: build-status
    params:
      build_status: INPROGRESS
      repository: stage-branch
      description_file: stage-branch/build_descriptions/deploy-stage-env.txt
  - task: deploy
    input_mapping:
      source: stage-branch
    file: stage-branch/tasks/rancher-deploy.yml
    params:
      COMPOSE_PROJECT_NAME: ((compose-project-name))
      DJANGO_SETTINGS_MODULE: ((stage-django-settings))
      SENTRY_ENVIRONMENT: stage
      RANCHER_URL: ((stage-rancher-url))
      RANCHER_ACCESS_KEY: ((stage-rancher-access-key))
      RANCHER_SECRET_KEY: ((stage-rancher-secret-key))
      SENTRY_DSN: ((sentry-dsn))
      SECRETS_FROM_ENV_FILES: 1
      MONGO_REPLICA_KEYFILE_URL: ((stage-mongo-replica-keyfile-url))
    timeout: 5m
    attempts: 3 # for Client.Timeout exceeded while awaiting headers
  - in_parallel:
    - task: init-mongo-rs
      file: stage-branch/tasks/rancher-init-mongo-rs.yml
      params:
        RANCHER_URL: ((stage-rancher-url))
        RANCHER_ACCESS_KEY: ((stage-rancher-access-key))
        RANCHER_SECRET_KEY: ((stage-rancher-secret-key))
        RANCHER_CONTAINER_NAME: ((rancher-mongo-container-name))
      timeout: 1m
    # add more initial tasks here, like this:
    #- task: import-extra-data
    #  file: stage-branch/tasks/rancher-import-extra-data.yml
    #  params:
    #    RANCHER_URL: ((stage-rancher-url))
    #    RANCHER_ACCESS_KEY: ((stage-rancher-access-key))
    #    RANCHER_SECRET_KEY: ((stage-rancher-secret-key))
    #    RANCHER_CONTAINER_NAME: ((rancher-main-container-name))
    #    EXTRA_DATA_CSV_URL: ((extra-data-csv-url))
    #    EXTRA_DATA_DIR: /media/extra_data
    #  timeout: 15m
  on_success:
    put: build-status
    params:
      build_status: SUCCESSFUL
      repository: stage-branch
      description_file: stage-branch/build_descriptions/deploy-stage-env.txt
  on_failure:
    put: build-status
    params:
      build_status: FAILED
      repository: stage-branch
      description_file: stage-branch/build_descriptions/deploy-stage-env.txt

- name: stage-prod-merge
  serial: true
  build_logs_to_retain: 10
  plan:
  - get: stage-branch
  - put: build-status
    params:
      build_status: INPROGRESS
      repository: stage-branch
      description_file: stage-branch/build_descriptions/stage-prod-merge.txt
  - task: prod-merge
    input_mapping:
      source-branch: stage-branch
    file: stage-branch/tasks/git-merge.yml
    params:
      DESTINATION_BRANCH: prod
      OAUTH_CLIENT_KEY: ((bitbucket-client-id))
      OAUTH_CLIENT_SECRET: ((bitbucket-client-secret))
  on_success:
    put: build-status
    params:
      build_status: SUCCESSFUL
      repository: stage-branch
      description_file: stage-branch/build_descriptions/stage-prod-merge.txt
  on_failure:
    put: build-status
    params:
      build_status: FAILED
      repository: stage-branch
      description_file: stage-branch/build_descriptions/stage-prod-merge.txt

- name: deploy-prod-env
  serial: true
  build_logs_to_retain: 10
  plan:
  - get: prod-branch
    trigger: true
  - put: build-status
    params:
      build_status: INPROGRESS
      repository: prod-branch
      description_file: prod-branch/build_descriptions/deploy-prod-env.txt
  - task: deploy
    input_mapping:
      source: prod-branch
    file: prod-branch/tasks/rancher-deploy.yml
    params:
      COMPOSE_PROJECT_NAME: ((compose-project-name))
      DJANGO_SETTINGS_MODULE: ((prod-django-settings))
      SENTRY_ENVIRONMENT: prod
      RANCHER_URL: ((prod-rancher-url))
      RANCHER_ACCESS_KEY: ((prod-rancher-access-key))
      RANCHER_SECRET_KEY: ((prod-rancher-secret-key))
      SENTRY_DSN: ((sentry-dsn))
      # Rancher secrets
      MONGO_REPLICA_KEYFILE_URL: ((prod-mongo-replica-keyfile-url))
      MONGO_INITDB_ROOT_PASSWORD: ((mongo-initdb-root-password))
      MONGO_MAINDB_PASSWORD: ((mongo-maindb-password))
      POSTGRES_PASSWORD: ((postgres-password))
      POSTGRES_SHARED_PASSWORD: ((postgres-shared-password))
    timeout: 5m
    attempts: 3 # for Client.Timeout exceeded while awaiting headers
  - in_parallel:
    - task: init-mongo-rs
      file: prod-branch/tasks/rancher-init-mongo-rs.yml
      params:
        RANCHER_URL: ((prod-rancher-url))
        RANCHER_ACCESS_KEY: ((prod-rancher-access-key))
        RANCHER_SECRET_KEY: ((prod-rancher-secret-key))
        RANCHER_CONTAINER_NAME: ((rancher-mongo-container-name))
      timeout: 1m
    # add more initial tasks here, like this:
    #- task: import-extra-data
    #  file: prod-branch/tasks/rancher-import-extra-data.yml
    #  params:
    #    RANCHER_URL: ((test-rancher-url))
    #    RANCHER_ACCESS_KEY: ((test-rancher-access-key))
    #    RANCHER_SECRET_KEY: ((test-rancher-secret-key))
    #    RANCHER_CONTAINER_NAME: ((rancher-main-container-name))
    #    EXTRA_DATA_CSV_URL: ((extra-data-csv-url))
    #    EXTRA_DATA_DIR: /media/extra_data
    #  timeout: 15m
  on_success:
    put: build-status
    params:
      build_status: SUCCESSFUL
      repository: prod-branch
      description_file: prod-branch/build_descriptions/deploy-prod-env.txt
  on_failure:
    put: build-status
    params:
      build_status: FAILED
      repository: prod-branch
      description_file: prod-branch/build_descriptions/deploy-prod-env.txt

- name: check-prod-env
  serial: false
  build_logs_to_retain: 100
  plan:
  - get: prod-branch
    trigger: true
    passed: [deploy-prod-env]
  - put: build-status
    params:
      build_status: INPROGRESS
      repository: prod-branch
      description_file: prod-branch/build_descriptions/check.txt
  - task: proxy-check
    file: prod-branch/tasks/rancher-exec-entrypoint.yml
    params:
      RANCHER_URL: ((prod-rancher-url))
      RANCHER_ACCESS_KEY: ((prod-rancher-access-key))
      RANCHER_SECRET_KEY: ((prod-rancher-secret-key))
      RANCHER_CONTAINER_NAME: ((rancher-main-container-name))
      ENTRYPOINT_CMD: 'check-proxy'
    timeout: 2m
  - task: parser-check
    file: prod-branch/tasks/rancher-exec-entrypoint.yml
    params:
      RANCHER_URL: ((prod-rancher-url))
      RANCHER_ACCESS_KEY: ((prod-rancher-access-key))
      RANCHER_SECRET_KEY: ((prod-rancher-secret-key))
      RANCHER_CONTAINER_NAME: ((rancher-main-container-name))
      ENTRYPOINT_CMD: 'check-parser'
    timeout: 1m
  on_success:
    put: build-status
    params:
      build_status: SUCCESSFUL
      repository: prod-branch
      description_file: prod-branch/build_descriptions/check.txt
  on_failure:
    put: build-status
    params:
      build_status: FAILED
      repository: prod-branch
      description_file: prod-branch/build_descriptions/check.txt


# add more jobs here, like this:
#- name: push-extra-data
#  serial: true
#  build_logs_to_retain: 10
#  plan:
#  - get: prod-branch
#    passed: [deploy-prod-env]
#  - put: build-status
#    params:
#      build_status: INPROGRESS
#      repository: prod-branch
#      description_file: prod-branch/build_descriptions/push-extra-data.txt
#  - task: push-extra-data
#    file: prod-branch/tasks/rancher-exec-entrypoint.yml
#    params:
#      RANCHER_URL: ((prod-rancher-url))
#      RANCHER_ACCESS_KEY: ((prod-rancher-access-key))
#      RANCHER_SECRET_KEY: ((prod-rancher-secret-key))
#      RANCHER_CONTAINER_NAME: ((rancher-main-container-name))
#      ENTRYPOINT_CMD: 'push-extra-data'
#    timeout: 1m
#  on_success:
#    put: build-status
#    params:
#      build_status: SUCCESSFUL
#      repository: prod-branch
#      description_file: prod-branch/build_descriptions/push-extra-data.txt
#  on_failure:
#    put: build-status
#    params:
#      build_status: FAILED
#      repository: prod-branch
#      description_file: prod-branch/build_descriptions/push-extra-data.txt


- name: clear-stage-env
  build_logs_to_retain: 1
  plan:
  - get: stage-branch
  - task: clear-services
    input_mapping:
      source: stage-branch
    file: stage-branch/tasks/rancher-clear.yml
    params:
      COMPOSE_PROJECT_NAME: ((compose-project-name))
      RANCHER_URL: ((stage-rancher-url))
      RANCHER_ACCESS_KEY: ((stage-rancher-access-key))
      RANCHER_SECRET_KEY: ((stage-rancher-secret-key))
